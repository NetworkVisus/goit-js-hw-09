{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,MAAOC,SAASC,cAAc,kBAC9BC,KAAMF,SAASC,cAAc,iBAC7BE,OAAQH,SAASC,cAAc,mBAC/BG,KAAMJ,SAASC,cAAc,UAgC/B,SAASI,EAAcC,EAAUP,GAC/B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CACNF,WACAP,UAGFU,EAAO,CAAEH,WAAUP,S,GAEpBA,E,IAzCPD,EAAKM,KAAKU,iBAAiB,UAE3B,SAAwBC,GACtBA,EAAMC,iBACN,IAAMC,EAAiBC,OAAOpB,EAAKK,OAAOgB,OACpCC,EAAgBF,OAAOpB,EAAKC,MAAMoB,OAClCE,EAAeH,OAAOpB,EAAKI,KAAKiB,OACtC,GAAIF,GAAkB,GAAKI,EAAe,GAAKD,EAAgB,EAE7D,YADAE,EAAA1B,GAAS2B,OAAOC,QAAQ,sCAK1B,IAFA,IAAIC,EAAeL,EAEVM,EAAI,EAAGA,GAAKT,EAAgBS,GAAK,EACxCrB,EAAcqB,EAAGD,GACdE,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUP,EAAK6B,EAAL7B,MACjBuB,EAAA1B,GAAS2B,OAAOM,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAAN/B,EAAM,M,IAGjDgC,OAAM,SAAAH,G,IAAGtB,EAAQsB,EAARtB,SAAUP,EAAK6B,EAAL7B,MAClBuB,EAAA1B,GAAS2B,OAAOC,QACd,sBAAqCM,OAAfxB,EAAS,QAAYwB,OAAN/B,EAAM,M,IAGjD0B,GAAgBJ,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('[name = delay]'),\n  step: document.querySelector('[name = step]'),\n  amount: document.querySelector('[name = amount]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', handleCreation);\n\nfunction handleCreation(event) {\n  event.preventDefault();\n  const amountToNumber = Number(refs.amount.value);\n  const delayToNumber = Number(refs.delay.value);\n  const stepToNumber = Number(refs.step.value);\n  if (amountToNumber <= 0 || stepToNumber < 0 || delayToNumber < 0) {\n    Notiflix.Notify.failure('Please, check inserted data again!');\n    return;\n  }\n  let delayCounter = delayToNumber;\n\n  for (let i = 1; i <= amountToNumber; i += 1) {\n    createPromise(i, delayCounter)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayCounter += stepToNumber;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({\n          position,\n          delay,\n        });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","amountToNumber","Number","value","delayToNumber","stepToNumber","$parcel$interopDefault","Notify","failure","delayCounter","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.8b30ae4b.js.map"}